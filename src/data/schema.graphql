schema {
  query: Root
  mutation: Mutation
}

type CatalogType implements Node {
  id: ID!
  name: String
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation(locale: String): PresentationType
  rootCategoriesId: String
}

type CatalogTypeConnection {
  pageInfo: PageInfo!
  edges: [CatalogTypeEdge]
}

type CatalogTypeEdge {
  node: CatalogType
  cursor: String!
}

type CategoryType {
  id: ID!
  name: String
  description: String
  disabled: String
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation(locale: String): PresentationType
  childCategoriesId: String
  childProductsIds: String
}

type CategoryTypeConnection {
  pageInfo: PageInfo!
  edges: [CategoryTypeEdge]
}

type CategoryTypeEdge {
  node: CategoryType
  cursor: String!
}

input CreateCatalogInput {
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  rootCategoriesIds: [Int]
  clientMutationId: String!
}

input CreateCatalogLocalizedContentInput {
  id: String!
  locale: String!
  displayName: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  clientMutationId: String!
}

type CreateCatalogLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

type CreateCatalogPayload {
  viewer: Viewer
  catalogEdge: CatalogTypeEdge
  clientMutationId: String!
}

input CreateCategoryLocalizedContentInput {
  id: String!
  locale: String!
  displayName: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  clientMutationId: String!
}

type CreateCategoryLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

input DeleteCatalogInput {
  id: String!
  clientMutationId: String!
}

type DeleteCatalogPayload {
  viewer: Viewer
  clientMutationId: String!
}

input ModifyCatalogInput {
  id: String!
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation: String
  rootCategoriesIds: [Int]
  clientMutationId: String!
}

type ModifyCatalogPayload {
  viewer: Viewer
  catalogEdge: CatalogTypeEdge
  clientMutationId: String!
}

type Mutation {
  createCatalog(input: CreateCatalogInput!): CreateCatalogPayload
  modifyCatalog(input: ModifyCatalogInput!): ModifyCatalogPayload
  deleteCatalog(input: DeleteCatalogInput!): DeleteCatalogPayload
  createCatalogLocalizedContent(input: CreateCatalogLocalizedContentInput!): CreateCatalogLocalizedContentPayload
  createCategoryLocalizedContent(input: CreateCategoryLocalizedContentInput!): CreateCategoryLocalizedContentPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PresentationType {
  id: ID!
  locale: String
  displayName: String
  promotion: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  thumbnail: String
  smallImage: String
  largeImage: String
  video: String
  features: String
}

type Root {
  viewer(viewerId: Int, locale: String!): Viewer
  node(id: ID!): Node
}

type UserType implements Node {
  id: ID!
  login: String
  password: String
}

type UserTypeConnection {
  pageInfo: PageInfo!
  edges: [UserTypeEdge]
}

type UserTypeEdge {
  node: UserType
  cursor: String!
}

type Viewer implements Node {
  id: ID!
  user: UserType
  users(after: String, first: Int, before: String, last: Int): UserTypeConnection
  catalogs(search: String, start: Int, size: Int, orderBy: String, isDesc: Boolean, locale: String, after: String, first: Int, before: String, last: Int): CatalogTypeConnection
  catalog(id: String!, locale: String): CatalogType
  categories(search: String, start: Int, size: Int, orderBy: String, isDesc: Boolean, after: String, first: Int, before: String, last: Int): CategoryTypeConnection
}
