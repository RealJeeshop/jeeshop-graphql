schema {
  query: Root
  mutation: Mutation
}

type CatalogType implements Node {
  id: ID!
  name: String
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation(locale: String): PresentationType
  rootCategoriesId: String
  categories(locale: String, after: String, first: Int, before: String, last: Int): CategoryTypeConnection
}

type CatalogTypeConnection {
  pageInfo: PageInfo!
  edges: [CatalogTypeEdge]
}

type CatalogTypeEdge {
  node: CatalogType
  cursor: String!
}

type CategoryType {
  id: ID!
  name: String
  description: String
  disabled: String
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation(locale: String): PresentationType
  childCategoriesId: String
  childProductsIds: String
}

type CategoryTypeConnection {
  pageInfo: PageInfo!
  edges: [CategoryTypeEdge]
}

type CategoryTypeEdge {
  node: CategoryType
  cursor: String!
}

input CreateCatalogInput {
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  rootCategoriesIds: [Int]
  clientMutationId: String!
}

input CreateCatalogLocalizedContentInput {
  id: String!
  locale: String!
  displayName: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  clientMutationId: String!
}

type CreateCatalogLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

type CreateCatalogPayload {
  viewer: Viewer
  catalogEdge: CatalogTypeEdge
  clientMutationId: String!
}

input CreateCategoryInput {
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  clientMutationId: String!
}

input CreateCategoryLocalizedContentInput {
  id: String!
  locale: String!
  displayName: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  clientMutationId: String!
}

type CreateCategoryLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

type CreateCategoryPayload {
  viewer: Viewer
  categoryEdge: CategoryTypeEdge
  clientMutationId: String!
}

input CreateProductLocalizedContentInput {
  productId: String!
  locale: String!
  displayName: String
  promotion: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  clientMutationId: String!
}

type CreateProductLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

input CreateProductMutationInput {
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  clientMutationId: String!
}

type CreateProductMutationPayload {
  viewer: Viewer
  productEdge: ProductTypeEdge
  clientMutationId: String!
}

input CreateSKUMutationInput {
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  price: Float
  currency: String
  reference: String
  threshold: Int
  quantity: Int
  available: Boolean
  clientMutationId: String!
}

type CreateSKUMutationPayload {
  viewer: Viewer
  sku: SKUType
  clientMutationId: String!
}

input DeleteCatalogInput {
  id: String!
  clientMutationId: String!
}

input DeleteCatalogLocalizedContentInput {
  catalogId: String!
  locale: String!
  clientMutationId: String!
}

type DeleteCatalogLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

type DeleteCatalogPayload {
  viewer: Viewer
  clientMutationId: String!
}

input DeleteCategoryInput {
  id: String!
  clientMutationId: String!
}

input DeleteCategoryLocalizedContentInput {
  categoryId: String!
  locale: String!
  clientMutationId: String!
}

type DeleteCategoryLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

type DeleteCategoryPayload {
  viewer: Viewer
  clientMutationId: String!
}

input DeleteProductLocalizedContentInput {
  productId: String!
  locale: String!
  clientMutationId: String!
}

type DeleteProductLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

input DeleteProductMutationInput {
  id: String!
  clientMutationId: String!
}

type DeleteProductMutationPayload {
  viewer: Viewer
  clientMutationId: String!
}

input DeleteSKUMutationInput {
  id: String!
  clientMutationId: String!
}

type DeleteSKUMutationPayload {
  viewer: Viewer
  clientMutationId: String!
}

type ImageType {
  id: ID!
  uri: String
}

input ModifyCatalogInput {
  id: String!
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation: String
  rootCategoriesIds: [Int]
  clientMutationId: String!
}

input ModifyCatalogLocalizedContentInput {
  catalogId: String!
  id: String!
  locale: String!
  displayName: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  clientMutationId: String!
}

type ModifyCatalogLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

type ModifyCatalogPayload {
  viewer: Viewer
  catalogEdge: CatalogTypeEdge
  clientMutationId: String!
}

input ModifyCategoryInput {
  id: String!
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  clientMutationId: String!
}

input ModifyCategoryLocalizedContentInput {
  categoryId: String!
  id: String!
  locale: String!
  displayName: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  smallImage: String
  largeImage: String
  video: String
  features: String
  clientMutationId: String!
}

type ModifyCategoryLocalizedContentPayload {
  viewer: Viewer
  clientMutationId: String!
}

type ModifyCategoryPayload {
  viewer: Viewer
  categoryEdge: CategoryTypeEdge
  clientMutationId: String!
}

input ModifyProductLocalizedContentInput {
  productId: String!
  locale: String!
  displayName: String
  promotion: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  clientMutationId: String!
}

type ModifyProductLocalizedContentPayload {
  viewer: Viewer
  productEdge: ProductTypeEdge
  clientMutationId: String!
}

input ModifyProductMutationInput {
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  clientMutationId: String!
}

type ModifyProductMutationPayload {
  viewer: Viewer
  productEdge: ProductTypeEdge
  clientMutationId: String!
}

input ModifySKUMutationInput {
  id: String!
  name: String!
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  price: Float
  currency: String
  reference: String
  threshold: Int
  quantity: Int
  available: Boolean
  clientMutationId: String!
}

type ModifySKUMutationPayload {
  viewer: Viewer
  sku: SKUType
  clientMutationId: String!
}

type Mutation {
  createCatalog(input: CreateCatalogInput!): CreateCatalogPayload
  modifyCatalog(input: ModifyCatalogInput!): ModifyCatalogPayload
  deleteCatalog(input: DeleteCatalogInput!): DeleteCatalogPayload
  createCatalogLocalizedContent(input: CreateCatalogLocalizedContentInput!): CreateCatalogLocalizedContentPayload
  modifyCatalogLocalizedContent(input: ModifyCatalogLocalizedContentInput!): ModifyCatalogLocalizedContentPayload
  deleteCatalogLocalizedContent(input: DeleteCatalogLocalizedContentInput!): DeleteCatalogLocalizedContentPayload
  createCategoryMutation(input: CreateCategoryInput!): CreateCategoryPayload
  modifyCategoryMutation(input: ModifyCategoryInput!): ModifyCategoryPayload
  deleteCategoryMutation(input: DeleteCategoryInput!): DeleteCategoryPayload
  createCategoryLocalizedContent(input: CreateCategoryLocalizedContentInput!): CreateCategoryLocalizedContentPayload
  modifyCategoryLocalizedContent(input: ModifyCategoryLocalizedContentInput!): ModifyCategoryLocalizedContentPayload
  deleteCategoryLocalizedContent(input: DeleteCategoryLocalizedContentInput!): DeleteCategoryLocalizedContentPayload
  createProductMutation(input: CreateProductMutationInput!): CreateProductMutationPayload
  modifyProductMutation(input: ModifyProductMutationInput!): ModifyProductMutationPayload
  deleteProductMutation(input: DeleteProductMutationInput!): DeleteProductMutationPayload
  createProductLocalizedContent(input: CreateProductLocalizedContentInput!): CreateProductLocalizedContentPayload
  deleteProductLocalizedContent(input: DeleteProductLocalizedContentInput!): DeleteProductLocalizedContentPayload
  modifyProductLocalizedContent(input: ModifyProductLocalizedContentInput!): ModifyProductLocalizedContentPayload
  createSKU(input: CreateSKUMutationInput!): CreateSKUMutationPayload
  modifySKU(input: ModifySKUMutationInput!): ModifySKUMutationPayload
  deleteSKU(input: DeleteSKUMutationInput!): DeleteSKUMutationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PresentationType {
  id: ID!
  locale: String
  displayName: String
  promotion: String
  shortDescription: String
  mediumDescription: String
  longDescription: String
  thumbnail: String
  smallImage: ImageType
  largeImage: ImageType
  video: String
  features: String
}

type ProductType {
  id: ID!
  name: String
  description: String
  disabled: String
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation(locale: String): PresentationType
  skus: [SKUType]
}

type ProductTypeConnection {
  pageInfo: PageInfo!
  edges: [ProductTypeEdge]
}

type ProductTypeEdge {
  node: ProductType
  cursor: String!
}

type Root {
  viewer(viewerId: Int): Viewer
  node(id: ID!): Node
}

type SKUType {
  id: ID!
  name: String
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  price: Float
  currency: String
  reference: String
  threshold: Int
  quantity: Int
  available: Boolean
  localizedPresentation(locale: String): PresentationType
}

type SKUTypeConnection {
  pageInfo: PageInfo!
  edges: [SKUTypeEdge]
}

type SKUTypeEdge {
  node: SKUType
  cursor: String!
}

type UserType implements Node {
  id: ID!
  login: String
  password: String
}

type UserTypeConnection {
  pageInfo: PageInfo!
  edges: [UserTypeEdge]
}

type UserTypeEdge {
  node: UserType
  cursor: String!
}

type Viewer implements Node {
  id: ID!
  user: UserType
  users(after: String, first: Int, before: String, last: Int): UserTypeConnection
  catalogs(search: String, start: Int, size: Int, orderBy: String, isDesc: Boolean, locale: String, after: String, first: Int, before: String, last: Int): CatalogTypeConnection
  catalog(id: String!, locale: String): CatalogType
  categories(search: String, start: Int, size: Int, orderBy: String, isDesc: Boolean, after: String, first: Int, before: String, last: Int): CategoryTypeConnection
  category(id: String!, locale: String): CategoryType
  products(search: String, start: Int, size: Int, orderBy: String, isDesc: Boolean, after: String, first: Int, before: String, last: Int): ProductTypeConnection
  product(id: String!, locale: String): ProductType
  skus(search: String, start: Int, size: Int, orderBy: String, isDesc: Boolean, after: String, first: Int, before: String, last: Int): SKUTypeConnection
}
