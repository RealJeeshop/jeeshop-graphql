schema {
  query: Root
}

type CatalogType implements Node {
  id: ID!
  name: String
  description: String
  disabled: Boolean
  startDate: String
  endDate: String
  visible: Boolean
  localizedPresentation: String
  rootCategoriesId: String
}

type CatalogTypeConnection {
  pageInfo: PageInfo!
  edges: [CatalogTypeEdge]
}

type CatalogTypeEdge {
  node: CatalogType
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Root {
  viewer(viewerId: Int): Viewer
  node(id: ID!): Node
}

type UserType implements Node {
  id: ID!
  login: String
  password: String
}

type UserTypeConnection {
  pageInfo: PageInfo!
  edges: [UserTypeEdge]
}

type UserTypeEdge {
  node: UserType
  cursor: String!
}

type Viewer implements Node {
  id: ID!
  user: UserType
  users(after: String, first: Int, before: String, last: Int): UserTypeConnection
  catalogs(after: String, first: Int, before: String, last: Int): CatalogTypeConnection
}
